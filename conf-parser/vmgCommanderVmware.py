from vmgCommanderBase import CommanderBase
from vmgInstallerDummy import InstallerDummy
from runCommands import *
import shutil

def writeNewLine(f):
	f.write("\n")

def writeComment(f, text):
	f.write("# " + text + "\n")

def writeHeader(f, text):
	f.write("#!" + text + "\n")

def writeOption(f, key, value):
	f.write(key + ' = "' + value + '"\n')

def tryWriteOption(f, key, section, conf_key):
	if (section.has_key(conf_key)):
		writeOption(f, key, section.get(conf_key))

vmaster_vmx_orig = "/home/vmgen/VMaster/VMaster.vmx"
vmaster_vmx = "/home/vmgen/VMaster/VMaster_modified.vmx"
mkfs = { "ntfs":"mkfs.ntfs", "ext2":"mkfs.ext2", "ext3":"mkfs.ext3", 
		"ext4":"mkfs.ext4", "swap":"mkswap"}

class CommanderVmware(CommanderBase):
	def startVM(self):
		print "\nStarting the VM..."

	def shutdownVM(self):
		print "\nShutting down the VM..."

	def connectToVM(self):
		print "\nEstablishing connection to the VM..."

	def disconnectFromVM(self):
		print "\nTerminating connection to the VM..."

	def setupHardware(self):
		print "\nCreating the hardware configuration..."
		section = self.data.getSection("hardware")

		with open("machine.vmx", "w") as f:
			writeHeader(f, "/usr/bin/vmware")
			writeOption(f, "config.version", "8")
			writeOption(f, "virtualHW.version", "7")
			tryWriteOption(f, "guestOs", section, "os")
			tryWriteOption(f, "displayName", section, "vm_name")
			tryWriteOption(f, "numvcpus", section, "num_cpu")
			tryWriteOption(f, "memsize", section, "ram")
			writeNewLine(f)
			
			# create hard disks
			self.hdds = []
			writeComment(f, "hard-disk")
			self.num_hdd = int(section["num_hdd"])
			for i in range(self.num_hdd):
				i = str(i)
				hdd_type = section["hdd" + i + "_type"]
				if hdd_type == "scsi":
					# only for scsi
					idx = section["hdd" + i + "_scsi_index"]
					writeOption(f, hdd_type + idx + ".present", "TRUE")
					writeOption(f, hdd_type + idx + ".virtualDev", "lsilogic")

				hdd_size = section["hdd" + i + "_size"]
				pos = section["hdd" + i + "_pos"]
				hdd_name = section["hdd" + i + "_name"]
				writeOption(f, hdd_type + pos + ".present", "TRUE")
				writeOption(f, hdd_type + pos + ".fileName", hdd_name)

				executeCommand("vmware-vdiskmanager -c -s " + hdd_size + \
						" -a lsilogic -t 0 " + hdd_name)
				self.hdds.append(hdd_name)

			writeNewLine(f)

			# create cd drives
			writeComment(f, "cd-rom")
			for i in range(int(section["num_cd_drive"])):
				i = str(i)
				cd_type = "ide"
				pos = section["cd" + i + "_pos"]
				cd_path = section["cd" + i + "_path"]
				writeOption(f, cd_type + pos + ".present", "TRUE")
				writeOption(f, cd_type + pos + ".deviceType", "cdrom-image")
				writeOption(f, cd_type + pos + ".fileName", cd_path)
				tryWriteOption(f, cd_type + pos + ".startConnected", section,\
						"cd" + i + "_connected")
			writeNewLine(f)

			writeComment(f, "ethernet")
			for i in range(int(section["num_eth"])):
				i = str(i)
				eth = "ethernet"
				eth_type = section["eth" + i + "_type"]
				writeOption(f, eth + i + ".present", "TRUE")
				writeOption(f, eth + i + ".virtualDev", "e1000")
				writeOption(f, eth + i + ".connectionType", eth_type)
				tryWriteOption(f, eth + i + ".startConnected", section,\
						"eth" + i + "_connected")
			writeNewLine(f)
			writeComment(f, "auto generated by VMware")

	def setupPartitions(self):
		section = self.data.getSection("partitions")
		# attach the hdds to VMaster
		shutil.copy2(vmaster_vmx_orig, vmaster_vmx)
		with open(vmaster_vmx, "a") as f:
			for i, h in enumerate(self.hdds):
				hdd_type = "scsi"
				idx = str(i + 2)
				pos = "0:" + idx
				writeOption(f, hdd_type + pos + ".present", "TRUE")
				writeOption(f, hdd_type + pos + ".fileName", h)

		# start VMaster
#		executeCommand("vmrun start " + vmaster_vmx)
#		time.sleep(30)

		# setup the partitions
		for i, h in enumerate(self.hdds):
			hdd = "/dev/sd" + chr(ord("b") + i)
			i = str(i)
			idx_primary = 0
			idx_logical = 4
			last_off = 0
			executeCommandSSH("parted -s " + hdd + " mklabel msdos")
			for j in range(int(section["hdd" + i + "_num_part"])):
				j = str(j)
				part = "hdd" + i + "_part" + j

				part_size = int(section[part + "_size"])
				part_type = section[part + "_type"]

				# update the next index
				if part_type == "primary" or part_type == "extended":
					idx_primary += 1
					crt_idx = idx_primary
				elif part_type == "logical":
					idx_logical += 1
					crt_idx = idx_logical

				executeCommandSSH("parted -s " + hdd + " mkpart " + \
						part_type + " " + str(last_off) + " " + \
						str(last_off + part_size))

				executeCommandSSH("hdparm -z " + hdd)

				if part_type != "extended":
					last_off += part_size
					part_fs = section[part + "_fs"]
					executeCommandSSH(mkfs[part_fs] + " " + hdd + str(crt_idx))


	def setupOperatingSystem(self):
		print "\nInstalling the operating system..."

	def setupConfigurations(self):
		print "\nConfiguring system settings..."
		section = self.data.getSection("config")
		for k, v in section.items():
			print k, "=", v

	def setupNetwork(self):	
		print "\nSetting up the network configurations..."
		section = self.data.getSection("network")
		for k, v in section.items():
			print k, "=", v

	def setupUsers(self):
		print "\nAdding users..."
		section = self.data.getSection("users")
		for i, u in enumerate(section.get("users")):
			print "Add user #", i
			print "\tName: ", u["name"]
			print "\tPassword: ", u["passwd"]
			print "\tGroups: ", u["groups"]
			print "\tHome directory: ", u["directory"]
			print "\tPermissions: ", u["perm"]
	
	def setupServices(self):
		print "\nInstalling services..."
		section = self.data.getSection("services")
		self.installPrograms(section)

	def setupDeveloperTools(self):
		print "\nInstalling developer tools..."
		section = self.data.getSection("devel")
		self.installPrograms(section)

	def setupGuiTools(self):
		print "\nInstalling GUI tools..."
		section = self.data.getSection("gui")
		self.installPrograms(section)
	
