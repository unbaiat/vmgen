from vmgCommanderBase import CommanderBase
from vmgInstallerDummy import InstallerDummy
import shlex, subprocess

def writeNewLine(f):
	f.write("\n")

def writeComment(f, text):
	f.write("# " + text + "\n")

def writeHeader(f, text):
	f.write("#!" + text + "\n")

def writeOption(f, key, value):
	f.write(key + ' = "' + value + '"\n')

def tryWriteOption(f, key, section, conf_key):
	if (section.has_key(conf_key)):
		writeOption(f, key, section.get(conf_key))

def executeCommand(command):
	args = shlex.split(command)
	p = subprocess.Popen(args)
	p.wait()

class CommanderVmware(CommanderBase):
	def startVM(self):
		print "\nStarting the VM..."

	def shutdownVM(self):
		print "\nShutting down the VM..."

	def connectToVM(self):
		print "\nEstablishing connection to the VM..."

	def disconnectFromVM(self):
		print "\nTerminating connection to the VM..."

	def setupHardware(self):
		print "\nCreating the hardware configuration..."
		section = self.data.getSection("hardware")

		with open("machine.vmx", "w") as f:
			writeHeader(f, "/usr/bin/vmware")
			writeOption(f, "config.version", "8")
			writeOption(f, "virtualHW.version", "7")
			tryWriteOption(f, "guestOs", section, "os")
			tryWriteOption(f, "displayName", section, "vm_name")
			tryWriteOption(f, "numvcpus", section, "num_cpu")
			tryWriteOption(f, "memsize", section, "ram")
			writeNewLine(f)
			
			# create hard disks
			writeComment(f, "hard-disk")
			for i in range(int(section["num_hdd"])):
				i = str(i)
				hdd_type = section["hdd" + i + "_type"]
				if hdd_type == "scsi":
					# only for scsi
					idx = section["hdd" + i + "_scsi_index"]
					writeOption(f, hdd_type + idx + ".present", "TRUE")
					writeOption(f, hdd_type + idx + ".virtualDev", "lsilogic")

				hdd_size = section["hdd" + i + "_size"]
				pos = section["hdd" + i + "_pos"]
				hdd_name = section["hdd" + i + "_name"]
				writeOption(f, hdd_type + pos + ".present", "TRUE")
				writeOption(f, hdd_type + pos + ".fileName", hdd_name)

				executeCommand("vmware-vdiskmanager -c -s " + hdd_size + \
						" -a lsilogic -t 0 " + hdd_name)

			writeNewLine(f)

			# create cd drives
			writeComment(f, "cd-rom")
			for i in range(int(section["num_cd_drive"])):
				i = str(i)
				cd_type = "ide"
				pos = section["cd" + i + "_pos"]
				cd_path = section["cd" + i + "_path"]
				writeOption(f, cd_type + pos + ".present", "TRUE")
				writeOption(f, cd_type + pos + ".deviceType", "cdrom-image")
				writeOption(f, cd_type + pos + ".fileName", cd_path)
				tryWriteOption(f, cd_type + pos + ".startConnected", section,\
						"cd" + i + "_connected")
			writeNewLine(f)

			writeComment(f, "ethernet")
			for i in range(int(section["num_eth"])):
				i = str(i)
				eth = "ethernet"
				eth_type = section["eth" + i + "_type"]
				writeOption(f, eth + i + ".present", "TRUE")
				writeOption(f, eth + i + ".virtualDev", "e1000")
				writeOption(f, eth + i + ".connectionType", eth_type)
				tryWriteOption(f, eth + i + ".startConnected", section,\
						"eth" + i + "_connected")
			writeNewLine(f)

			writeComment(f, "auto generated by VMware")


#		for k, v in section.items():
#			print k, "=", v

	def setupOperatingSystem(self):
		print "\nInstalling the operating system..."

	def setupConfigurations(self):
		print "\nConfiguring system settings..."
		section = self.data.getSection("config")
		for k, v in section.items():
			print k, "=", v

	def setupNetwork(self):	
		print "\nSetting up the network configurations..."
		section = self.data.getSection("network")
		for k, v in section.items():
			print k, "=", v

	def setupUsers(self):
		print "\nAdding users..."
		section = self.data.getSection("users")
		for i, u in enumerate(section.get("users")):
			print "Add user #", i
			print "\tName: ", u["name"]
			print "\tPassword: ", u["passwd"]
			print "\tGroups: ", u["groups"]
			print "\tHome directory: ", u["directory"]
			print "\tPermissions: ", u["perm"]
	
	def setupServices(self):
		print "\nInstalling services..."
		section = self.data.getSection("services")
		self.installPrograms(section)

	def setupDeveloperTools(self):
		print "\nInstalling developer tools..."
		section = self.data.getSection("devel")
		self.installPrograms(section)

	def setupGuiTools(self):
		print "\nInstalling GUI tools..."
		section = self.data.getSection("gui")
		self.installPrograms(section)
	
